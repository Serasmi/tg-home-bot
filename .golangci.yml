# This file contains all available configuration options
# with their default values. See, https://golangci-lint.run/usage/configuration

# Options for analysis running.
run:
  # Timeout for analysis, e.g. 30s, 5m.
  # Default: 1m
  timeout: 5m
  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 2

# output configuration options
output:
  # Make issues output unique by line.
  # Default: true
  uniq-by-line: false
  # Sort results by: filepath, line and column.
  sort-results: true

# All available settings of specific linters.
linters-settings:
  funlen:
    lines: 120
    statements: 80
  govet:
    # Enable analyzers by name.
    # (in addition to default:
    #   appends, asmdecl, assign, atomic, bools, buildtag, cgocall, composites, copylocks, defers, directive, errorsas,
    #   framepointer, httpresponse, ifaceassert, loopclosure, lostcancel, nilfunc, printf, shift, sigchanyzer, slog,
    #   stdmethods, stringintconv, structtag, testinggoroutine, tests, timeformat, unmarshal, unreachable, unsafeptr,
    #   unusedresult
    # ).
    # Run `go tool vet help` to see all analyzers.
    # Default: []
    enable:
      - defers
      - lostcancel
      - shadow
      - unreachable
    settings:
      shadow:
        # Whether to be strict about shadowing; can be noisy.
        # Default: false
        strict: true
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 20
  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 100
  goconst:
    # Ignore test files.
    # Default: false
    ignore-tests: true
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'.
    # See https://go-critic.github.io/overview#checks-overview.
    # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`.
    # By default, list of stable checks is used.
    enabled-checks:
      - appendCombine
      - badLock
      - badSorting
      - boolExprSimplify
      - builtinShadow
      - builtinShadowDecl
      - commentedOutImport
      - emptyStringTest
      - equalFold
      - evalOrder
      - httpNoBody
      - methodExprCall
      - nestingReduce
      - nilValReturn
      - preferStringWriter
      - ptrToRefParam
      - rangeValCopy
      - sloppyReassign
      - stringConcatSimplify
      - stringsCompare
      - tooManyResultsChecker
      - truncateCmp
      - typeDefFirst
      - uncheckedInlineErr
      - weakCond
      - yodaStyleExpr
    # Which checks should be disabled; can't be combined with 'enabled-checks'.
    # Default: []
    # disabled-checks:
    #   - regexpMust

linters:
  # Disable all linters.
  # Default: false
  disable-all: true
  # Enable specific linter
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - asciicheck
    - bodyclose
    - dogsled
    - dupl
    - durationcheck
    - errcheck
    - errname
    - errorlint
    - exhaustive
    - exportloopref
    - funlen
    - gocognit
    - goconst
    - gocritic
    - gocyclo
    - gofmt
    - goimports
    - gosec
    - gosimple
    - govet
    - ineffassign
    - interfacebloat
    - lll
    - musttag
    - nakedret
    - nestif
    - nilerr
    - nilnil
    - perfsprint
    - predeclared
    - reassign
    - revive
    - sqlclosecheck
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - whitespace
    - wsl

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - funlen
        - revive
        - wsl
    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "
    - linters:
        - revive
      text: "don't use an underscore in package name"
    - linters:
        - revive
      text: "should have comment or be unexported"
    - linters:
        - revive
      text: "should have a package comment"
    - linters:
        - stylecheck
      text: "ST1003:"
    - linters:
        - stylecheck
      text: "ST1000:"
  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false
  # Maximum issues count per one linter.
  # Set to 0 to disable.
  # Default: 50
  max-issues-per-linter: 0
  # Maximum count of issues with the same text.
  # Set to 0 to disable.
  # Default: 3
  max-same-issues: 0
